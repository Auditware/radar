services:
  radar:
    build:
      context: radar
      args:
        DJANGO_HOST: ${DJANGO_HOST}
        DJANGO_HOST_LOCAL: ${DJANGO_HOST_LOCAL}
        DJANGO_PORT: ${DJANGO_PORT}
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - radar_data:/radar_data

  api:
    image: api
    build:
      context: api
      args:
        DEBUG: ${DEBUG}
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_HOST: ${POSTGRES_HOST}
        POSTGRES_HOST_LOCAL: ${POSTGRES_HOST_LOCAL}
        POSTGRES_PORT: ${POSTGRES_PORT}
        DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
        DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
        SECRET_KEY: ${SECRET_KEY}
        RABBITMQ_USER: ${RABBITMQ_USER}
        RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
        CELERY_BROKER_HOST: ${CELERY_BROKER_HOST}
        CELERY_BROKER_HOST_LOCAL: ${CELERY_BROKER_HOST_LOCAL}
        CELERY_BROKER_PORT: ${CELERY_BROKER_PORT}
    ports:
      - "8000:8000"
    volumes:
      - radar_data:/radar_data
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", 'bash -c "exec 6<> /dev/tcp/localhost/8000"']
      start_period: 15s
      interval: 5s
      timeout: 5s
      retries: 20

  celeryworker:
    image: api
    command: poetry run celery -A api worker -l info
    stdin_open: true
    tty: true
    restart: on-failure
    volumes:
      - radar_data:/radar_data
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_HOST_LOCAL: ${POSTGRES_HOST_LOCAL}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      CELERY_BROKER_HOST: ${CELERY_BROKER_HOST}
      CELERY_BROKER_HOST_LOCAL: ${CELERY_BROKER_HOST_LOCAL}
      CELERY_BROKER_PORT: ${CELERY_BROKER_PORT}

  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 3s
      timeout: 5s
      retries: 5
  
  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672" 
      - "15672:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      start_period: 15s
      interval: 3s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  radar_data:
