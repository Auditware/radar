#!/bin/bash
set -e

export COMPOSE_BAKE=true

INITIAL_DIR=$(pwd)
RADAR_BASE_DIR="${XDG_CONFIG_HOME:-$HOME}/.radar"

usage() {
    echo "Usage: $0 [-p <path> [-s <source_directory_or_file>] [-t <templates_directory>]] [-i <severities_to_ignore>] [-o <output_directory>] [-a] [-d] [--dev] [-ss] [--no-update] [-h]"
    echo "Options:"
    echo "  -p, --path            Path to the target contract on the local filesystem                                           (required)"
    echo "  -s, --source          Specific source/scope within the contract path                                                (optional) (default - project root)"
    echo "  -t, --templates       Path to the templates directory                                                               (optional) (default - builtin_templates folder)"
    echo "  -i, --ignore          Comma-separated severities to ignore in the scan (e.g. low,medium)                            (optional)"
    echo "  -o, --output          Results output file path (output type controlled by extension e.g. .json/.md/.sarif)          (optional) (default - current directory)"
    echo "  -a, --ast             Additionally output the scanned contract's parsed AST                                         (optional)"
    echo "  -d, --dev             Use development docker-compose file for local builds and enable debug output                  (optional)"
    echo "  -ss, --store-sarif    Store and accumulate SARIF results from previous runs                                         (optional) (default - clean slate)"
    echo "  -nu, --no-update      Skip automatic update check for Docker images                                                 (optional)"
    echo "  -h, --help            Show this help message                                                                        (optional)"
    exit 1
}

check_docker() {
    local timeout_duration=5
    local retries=10

    for ((i=1; i<=retries; i++)); do
      if docker info > /dev/null 2>&1; then
        return
      else
        echo "[w] Docker is not available. Retrying in $timeout_duration seconds..."
        sleep "$timeout_duration"
      fi
    done

    echo "[e] Docker was not available after $retries attempts. Please ensure Docker is installed and running. If further problems arise, consider restarting the Docker service."
    exit 1
}


adjust_source_path_for_docker() {
    local base="$1"
    local target="$2"

    local resolved_base=$(cd "$base" && pwd)
    local resolved_target=$(cd "$(dirname "$base/$target")" && pwd)/$(basename "$target")

    if [[ "$resolved_target" == "$resolved_base"* ]]; then
        local rel_path="${resolved_target#$resolved_base/}"
        echo "$rel_path"
    else
        echo "$target"
    fi
}

path=""
source_directory_or_file=""
ignore_severities=""
output_directory="$INITIAL_DIR"
generate_ast=false
shutdown_containers=false
development_mode=false
store_sarif=false
skip_update=false

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -p|--path) path=$(realpath "$2" 2>/dev/null || echo "$2"); shift ;;
        -s|--source) source_directory_or_file=$(adjust_source_path_for_docker "$path" "$2"); shift ;;
        -t|--templates) templates_directory=$(realpath "$2" 2>/dev/null || echo "$2"); shift ;;
        -a|--ast) generate_ast=true ;;
        -i|--ignore) ignore_severities="$2"; shift ;;
        -o|--output) output_directory=$(realpath "$2" 2>/dev/null || echo "$2"); shift ;;
        -k|--kill-after) shutdown_containers=true ;;
        -d|--dev) development_mode=true ;;
        -nu|--no-update) skip_update=true ;;
        -ss|--store-sarif) store_sarif=true ;;
        -h|--help) usage ;;
        *) echo "[e] Unknown argument: $1"; usage ;;
    esac
    shift
done

export RADAR_DEV_MODE=$development_mode

# Check if radar directory exists and reinstall if missing
if [ ! -d "$RADAR_BASE_DIR" ]; then
    echo "[w] radar directory not found at $RADAR_BASE_DIR"
    echo "[i] Running installation to set up radar directory..."
    
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    
    if [ -f "$SCRIPT_DIR/install-radar.sh" ]; then
        bash "$SCRIPT_DIR/install-radar.sh"
    else
        echo "[e] Install script not found. Please run the install script manually."
        exit 1
    fi
fi

# Determine which docker-compose file to use
cd "$RADAR_BASE_DIR"
compose_file="docker-compose.yml"
if [ "$development_mode" = true ] && [ -d "controller" ] && [ -f "docker-compose-dev.yml" ]; then
    echo "[i] Running in development mode"
    compose_file="docker-compose-dev.yml"
fi
cd "$INITIAL_DIR"

if [ "$shutdown_containers" = true ] && [ -z "$path" ]; then
    echo "[i] Shutting down radar containers"
    cd "$RADAR_BASE_DIR"
    docker compose -f "$compose_file" down --quiet
    exit 0
fi

check_docker

arm_specific_flag=""
if [[ "$(uname -m)" == "arm64" ]] || [[ "$(uname -m)" == "aarch64" ]]; then
    arm_specific_flag="--platform linux/amd64"
fi

check_image_update() {
    local image="$1"
    local registry="$2"
    local registry_digest

    registry_digest=$(docker pull $arm_specific_flag "$registry" > /dev/null 2>&1 && docker inspect --format="{{index .RepoDigests 0}}" "$registry" 2>/dev/null)

    if [ -z "$registry_digest" ]; then
        echo "[w] Could not retrieve the digest for $registry. Skipping update check."
        return 1
    fi

    local local_digest
    local_digest=$(docker images --format "{{.Repository}}@{{.Digest}}" "$image" 2>/dev/null | head -n 1)

    if [ "$local_digest" != "$registry_digest" ]; then
        echo "[i] Updating $image to latest version"
        docker pull $arm_specific_flag "$registry" > /dev/null 2>&1
        return 0
    else
        echo "[i] $image is up to date."
        return 1
    fi
}

# Check for image updates unless --no-update flag is used
if [ "$skip_update" = false ] && [ "$development_mode" = false ]; then
    echo "[i] Checking for Docker image updates..."
    cd "$RADAR_BASE_DIR"
    
    updated=false
    if check_image_update "ghcr.io/auditware/radar-controller" "ghcr.io/auditware/radar-controller:main"; then
        updated=true
    fi
    if check_image_update "ghcr.io/auditware/radar-api" "ghcr.io/auditware/radar-api:main"; then
        updated=true
    fi
    
    if [ "$updated" = true ]; then
        echo "[i] Restarting services with updated images..."
        docker compose -f "$compose_file" up -d > /dev/null 2>&1
    fi
    
    cd "$INITIAL_DIR"
elif [ "$development_mode" = true ]; then
    echo "[i] Skipping image update check on development mode"
elif [ "$skip_update" = true ]; then
    echo "[i] Skipping image update check (--no-update flag used)"
fi

if [ -z "$path" ]; then
    usage
fi

if [[ -n "$path" ]]; then
    path=$(cd "$path" && pwd)
fi
if [[ -n "$templates" ]]; then
    templates=$(cd "$templates" && pwd)
fi
cd "$RADAR_BASE_DIR"

# In dev mode, sync local code changes to ~/.radar/
if [ "$development_mode" = true ]; then
    echo "[i] Syncing local code changes to $RADAR_BASE_DIR"
        
    rsync_opts="-aq --delete"
    if [ -f "$INITIAL_DIR/.rsyncignore" ]; then
        rsync_opts="$rsync_opts --exclude-from=$INITIAL_DIR/.rsyncignore"
    fi
    
    if [ -d "$INITIAL_DIR/api" ]; then
        rsync $rsync_opts "$INITIAL_DIR/api/" "$RADAR_BASE_DIR/api/"
    fi
    if [ -d "$INITIAL_DIR/controller" ]; then
        rsync $rsync_opts "$INITIAL_DIR/controller/" "$RADAR_BASE_DIR/controller/"
    fi
fi

checksum_file="docker_checksum.sha"
current_checksum=$(cat "$compose_file" | shasum -a 256 | cut -d" " -f1)

# Clean up previous runs unless --store-sarif flag is used
if [ "$store_sarif" = false ]; then
    echo "[i] Cleaning up previous scan results"
    
    docker compose -f "$compose_file" down >/dev/null 2>&1 || true    
    docker volume rm radar_radar_data >/dev/null 2>&1 || true
    docker volume rm radar_postgres_data >/dev/null 2>&1 || true
    
    echo "[i] Previous scan data cleaned"
else
    echo "[i] Storing SARIF results - will accumulate with previous runs"
fi

# Force rebuild in dev mode to pick up code changes
if [ "$development_mode" = true ]; then
    echo "[i] Building images from source code (if frozen - make sure Docker is available)"
    docker compose -f "$compose_file" up -d --build
elif [ -f "$checksum_file" ]; then
    stored_checksum=$(cat "$checksum_file")
    if [ "$current_checksum" != "$stored_checksum" ]; then
        echo "[i] Configuration changed, building images.. (if frozen - make sure Docker is available)"
        docker compose -f "$compose_file" up -d --build
        echo "$current_checksum" > "$checksum_file"
    else
        echo "[i] Running images.. (if frozen - make sure Docker is available)" 
        docker compose -f "$compose_file" up -d --no-build
    fi
else
    echo "[i] First run, building images.. (if frozen - make sure Docker is available)"
    docker compose -f "$compose_file" up -d --build
    echo "$current_checksum" > "$checksum_file"
fi

container_path="/contract"
if [ -n "$source_directory_or_file" ]; then
    container_path+="/${source_directory_or_file}"
fi

docker_command="docker compose -f \"$compose_file\" run --rm -T -v \"${path}\":/contract"
if [ -n "$templates_directory" ]; then
    docker_command+=" -v \"${templates_directory}\":/templates"
fi
docker_command+=" controller --path \"${path}\" --container-path \"${container_path}\""
if [ -n "$templates_directory" ]; then
    docker_command+=" --templates /templates"
    # If templates_directory is a file, pass the original filename
    if [ -f "$templates_directory" ]; then
        original_filename=$(basename "$templates_directory")
        docker_command+=" --templates-filename \"${original_filename}\""
    fi
fi
if [ "$generate_ast" = true ]; then
    docker_command+=" --ast"
fi
if [ -n "$output_directory" ]; then
    docker_command+=" --output \"${output_directory}\""
fi
if [ -n "$ignore_severities" ]; then
    docker_command+=" --ignore \"${ignore_severities}\""
fi
if [ "$development_mode" = true ]; then
    docker_command+=" --debug"
fi


# echo "[d] Executing command: $docker_command"
eval "$docker_command"

if [ "$shutdown_containers" = true ]; then
    echo "[i] Shutting down radar containers"
    cd "$RADAR_BASE_DIR"
    docker compose -f "$compose_file" down --quiet
    cd "$INITIAL_DIR"
fi

cd "$INITIAL_DIR"

# Determine output file paths based on whether output_directory is a file or directory
if [[ "$output_directory" == *".sarif" ]]; then
    output_file="$output_directory"
    docker cp radar-api:/radar_data/output.sarif "$output_file" >/dev/null 2>&1
    echo "[i] Results written to $output_file"
elif [[ "$output_directory" == *".md" ]]; then
    output_file="$output_directory"
    docker cp radar-api:/radar_data/output.md "$output_file" >/dev/null 2>&1
    echo "[i] Results written to $output_file"
elif [[ "$output_directory" == *".json" ]]; then
    output_file="$output_directory"
    docker cp radar-api:/radar_data/output.json "$output_file" >/dev/null 2>&1
    echo "[i] Results written to $output_file"
else
    mkdir -p "$output_directory"
    output_dir="${output_directory%/}"
    output_file="$output_dir/output.json"
    docker cp radar-api:/radar_data/output.json "$output_file" >/dev/null 2>&1
    echo "[i] Results written to $output_file"
fi

if [ "$generate_ast" = true ]; then
    if [[ "$output_directory" == *.* ]]; then
        ast_output="$(dirname "$output_directory")/ast.json"
    else
        output_dir="${output_directory%/}"
        ast_output="$output_dir/ast.json"
    fi
    echo "[i] Generating AST file at $ast_output"
    docker cp radar-api:/radar_data/ast.json "$ast_output" >/dev/null 2>&1
fi